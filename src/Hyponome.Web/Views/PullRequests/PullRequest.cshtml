@model Octokit.PullRequest
@{
	Layout = "_Layout";
}

<div class="container-fluid">
	<div class="repository-content">
		<div class="issues-listing">
			<div class="gh-header pull request">
				<div class="gh-header-show">
					<h1 class="gh-header-title">
						<span class="js-issue-title">@Model.Title</span>
						<span class="gh-header-number">#@Model.Number</span>
						<a href="@Model.HtmlUrl" class="btn btn-sm" target="_blank">Open on GitHub</a>
					</h1>
				</div>
				<div class="flex-table gh-header-meta">
					<div class="flex-table-item flex-table-item-primary">
						<a href="@Model.User.HtmlUrl" class="author pull-header-username css-truncate css-truncate-target expandable">@Model.User.Login</a> 
						wants to merge 
						<span class="commit-ref current-branch css-truncate expandable">
							<span class="css-truncate user">@Model.Head.Label</span>
						</span>
						into 
						<span class="commit-ref current-branch css-truncate expandable">
							<span class="css-truncate-target user">@Model.Base.Label</span>
						</span>
					</div>
				</div>
			</div>
			<div role="tabpanel">
				<ul id="pr-tabs" class="nav nav-tabs" role="tablist">
					<li role="presentation" class="active"><a href="#files" aria-controls="files" role="tab" data-toggle="tab"><span class="octicon octicon-diff"></span> Files changed <span class="badge">@Model.ChangedFiles</span></a></li>
					<li role="presentation"><a style="display:none" href="#textdiff" aria-controls="textdiff" role="tab" data-toggle="tab"><span class="octicon octicon-unfold"></span> Script</a></li>
				</ul>
				<div class="tab-content">
					<div role="tabpanel" class="tab-pane active" id="files">
						<div class="view-pull-request clearfix">
							<div class="files-bucket is-visible">
								<div class="uncommentable">
									<div class="diff-view">
										@foreach(var file in @ViewBag.Files) {
											<div class="file show-inline-notes">
												<div class="file-header">
													<div class="file-actions">
														<button type="button" class="btn btn-sm" onclick="showScript('@("editor_" + @file.Sha)');">View Script</button>
													</div>
													<div class="file-info">
														<span class="octicon octicon-file-text"></span>
														<span title="@file.FileName"> @file.FileName</span>
													</div>
												</div>
												<div class="data highlight blow-wrapper">
													<div id="editor_@file.Sha" class="file-editor">@file.Patch</div>
												</div>
											</div>
										}
									</div>
								</div>
							</div>
						</div>
					</div>
					<div role="tabpanel" class="tab-pane" id="textdiff">
						<div id="view-text-diff" class="view-text-diff clearfix">
							<div id="flex-container">
								<div id="acediff-left-editor"></div>
								<div id="acediff-gutter"></div>
								<div id="acediff-right-editor"></div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section scripts {
	<script>
		var diffEditor;
		var showNewScript = function(script, scriptSyntax) {
			if(!diffEditor) {
				diffEditor = ace.edit("acediff-left-editor");
				diffEditor.getSession().setMode(`ace/mode/${scriptSyntax}`);
				diffEditor.setTheme('ace/theme/monokai');
				diffEditor.getSession().setUseWrapMode(false);
				diffEditor.setReadOnly(true);
				diffEditor.setOptions({ maxLines: Infinity });
			
				$("#acediff-left-editor").show();
				$("#acediff-gutter").hide();
				$("#acediff-right-editor").hide();
			}
			diffEditor.getSession().setValue(script);
		}
		
		var showModifiedScript = function(oldScript, newScript, scriptSyntax) {
			var aceDiffer = new AceDiff({
		        mode: `ace/mode/${scriptSyntax}`,
				theme: "ace/theme/monokai",
				maxLines: Infinity,
				showConnectors: true,
		        left: {
		            id: "acediff-left-editor",
		            content: oldScript.replace(/\r\n/g, "\n")
		        },
		        right: {
		            id: "acediff-right-editor",
		            content: newScript.replace(/\r\n/g, "\n")
		        },
		        classes: {
		            gutterID: "acediff-gutter"
		        }
		    });
		}
		
		var stepTemplateScriptSyntaxProperty = "Octopus.Action.Script.Syntax";
		var stepTemplateTerraformTemplateProperty = "Octopus.Action.Terraform.Template";
		var stepTemplateScriptProperties = ["Octopus.Action.Script.ScriptBody", stepTemplateTerraformTemplateProperty];

		var getScriptSyntax = function(editor) {
			var scriptSyntaxOccurrences = editor.findAll(`"${stepTemplateScriptSyntaxProperty}":`, {
				backwards: false,
				wrap: false,
				caseSensitive: false,
				wholeWord: false,
				regExp: false
			});
			if (scriptSyntaxOccurrences > 0) {
				var scriptSyntaxText = editor.session.getLine(editor.getSelectionRange().start.row)
				if (scriptSyntaxText.endsWith(",")) {
					scriptSyntaxText = scriptSyntaxText.substr(0, scriptSyntaxText.length - 1);
				}
				var scriptSyntax = JSON.parse("{" + scriptSyntaxText.substr(1) + "}")[stepTemplateScriptSyntaxProperty];
				if (scriptSyntax === undefined) return "powershell";
				
				scriptSyntax = scriptSyntax.toLowerCase();
				switch(scriptSyntax) {
					case "bash":
						return "sh";
					default:
						return scriptSyntax;
				}
			}

			var terraformTemplateOccurrences = editor.findAll(`"${stepTemplateTerraformTemplateProperty}":`, {
				backwards: false,
				wrap: false,
				caseSensitive: false,
				wholeWord: false,
				regExp: false
			});
			if (terraformTemplateOccurrences > 0) {
				return "terraform";
			}

			return "powershell";
		}

		var showScript = function(editorId) {
			var editor = ace.edit(editorId);

			var scriptSyntax = getScriptSyntax(editor);

			var occurrences, scriptProperty;
			for(var i = 0; i < stepTemplateScriptProperties.length; i++) {
				scriptProperty = stepTemplateScriptProperties[i];
				occurrences = editor.findAll(`"${scriptProperty}":`, {
					backwards: false,
					wrap: false,
					caseSensitive: false,
					wholeWord: false,
					regExp: false
				});
				if (occurrences > 0) {
					break;	
				}
			}
			
			var first = editor.getSelectionRange();
			if(occurrences === 1) {
				var newText = editor.session.getLine(first.start.row);
				if(newText.endsWith(',')) {
					newText = newText.substr(0, newText.length - 1);
				}
				var newScriptBody = JSON.parse("{" + newText.substr(1) + "}")[scriptProperty];
				showNewScript(newScriptBody, scriptSyntax);
			} else {
				editor.findNext();
				var second = editor.getSelectionRange();
				
				var	oldText = editor.session.getLine(first.start.row), 
					newText = editor.session.getLine(second.start.row);
				
				if(oldText.endsWith(',')) {
					oldText = oldText.substr(0, oldText.length - 1);
				}
				if(newText.endsWith(',')) {
					newText = newText.substr(0, newText.length - 1);
				}
				var oldScriptBody = JSON.parse("{" + oldText.substr(1) + "}")[scriptProperty];
				var newScriptBody = JSON.parse("{" + newText.substr(1) + "}")[scriptProperty];

				showModifiedScript(oldScriptBody, newScriptBody, scriptSyntax);
			
				$("#acediff-left-editor").show();
				$("#acediff-gutter").show();
				$("#acediff-right-editor").show();
			}

			$("#pr-tabs a[href='#textdiff']").show();
			$("#pr-tabs a[href='#textdiff']").tab("show");
		}

		$(document).ready(function () {
			$('div[id^="editor_"]').each(function(index, item) {
				var editor = ace.edit($(item).attr('id'));
				editor.getSession().setMode('ace/mode/diff');
				editor.setTheme('ace/theme/monokai');
				editor.getSession().setUseWrapMode(false);
				editor.setReadOnly(true);
				editor.setOptions({ maxLines: Infinity });
			});
		});
	</script>

}